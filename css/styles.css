* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.menu-container {
  color: #fff;
  background-color: #5995da; /* Blue */
  padding: 20px 0;
  display: flex; /* Make this a flex container */
  justify-content: center; /* Horiz. align contained items */
  /* Other Alignments: */
  /* justify-content: flex-start; */
  /* justify-content: flex-end; */
}

.menu {
  /* For debugging */
  /* border: 1px solid #fff; */

  width: 900px;
  display: flex; /* Nested flex container */

  /* Horiz. align multiple items */
  justify-content: space-between; /* Evenly distributed in the line. */

  /*  Evenly distributed in line, with half-size spaces on either end. */
  /* justify-content: space-around; */
}

/* Flex containers only position elements one level deep. */
/* By grouping .signup and .login into .links, .menu only has 2 flex items. */
.links {
  /* For debugging */
  /* border: 1px solid #fff; */

  display: flex;
  justify-content: flex-end;
}

.login {
  margin-left: 20px; /* Margins work just like in the normal box model */
}

.header-container {
  color: #5995da;
  background-color: #d6e9fe;
  display: flex;
  justify-content: center;
}

.header {
  width: 900px;
  height: 300px; /* setting explicit height allows items to be vert. aligned */
  display: flex;
  justify-content: space-between;
  align-items: center; /* Cross-axis (vert.) alignment */
  /* Other Alignments: */
  /* align-items: flex-start; */
  /* align-items: flex-end; */
  /* align-items: stretch; */
  /* align-items: baseline; */
}

.photo-grid-container {
  display: flex;
  justify-content: center;
}

.photo-grid {
  width: 900px;
  display: flex;

  /* Control whether flex container is single-line or multi-line,
     and the direction of the cross-axis (determines direction of new lines). */
  flex-wrap: wrap; /* multi-line. */

  /* single-line. */
  /* flex-wrap: nowrap; */

  /* cross-start and cross-end directions swapped. */
  /* flex-wrap: wrap-reverse; */
}

@media (min-width:600px) {
  .photo-grid {
    justify-content: center;

    /* flex-direction can control the order of items */
    /* flex-direction: row-reverse; */
  }
}

@media (max-width:599px) {
  .photo-grid {
      /* Control whether items render horizontally (default) or vertically.
     Useful for responsive design; most mobile layouts are single column,
     while most desktop layouts stack elements horizontally. */
    flex-direction: column;

    /* flex-direction can control the order of items */
    /* flex-direction: column-reverse; */

    /* Rotating direction of the container also rotates the direction of
      justify-content and align-items. */
      align-items: center;
  }
}

.photo-grid-item {
  /* border: 1px solid #fff; */
  width: 300px;
  height: 300px;
}

/* It's also possible to control item position through the items order property.
   Default is 0; increasing/decreasing moves the item right/left. */
/* Unlike row-reverse and column-reverse, order works across row/column
   boundaries.
*/
/* Swap order of .one and .five */
.first-item {
  order: 1;
}

.last-item {
  order: -1;
}

/* Can do the same with vertical alignment. */
.social,
.subscribe {
  align-self: flex-end;  /* override the containers align-items */
  margin-bottom: 20px;  /* margin works as normal */
}

/* Flex items are *flexible*: they can shrink/stretch to match their containers
   width. The 'flex' property acts as a weight to tell the container how to
   distribute space to each item. */
.footer {
  display: flex;
  justify-content: space-between;
}

.footer-item {
  border: 1px solid #fff;
  background-color: #d6e9fe;
  height: 200px;
  flex: 1;  /* items with the same flex will stretch equally */
}

.footer-three {
  flex: 2;  /* will grow twice as much as `flex: 1` */
}

/* Can mix flexible boxes with fixed width ones */
/* This is a good pattern for fixed-width sidebars with flexible content. */
.footer-one,
.footer-three {
  background-color: #5995da;

  /* fall back to explicit 'width' */
  /* without flex initial, would still have flex from previous rules, and width
     would be ignored */
  flex: initial;
  width: 300px;
}

/* auto-margins can be an alternative to an extra div for aligning a group of
   items left/right.
   Think of auto-margins as a "divider" for flex items in the container. */
.auto-margin-signup {
  /* auto-margins eat up *all* the extra space in a flex container */
  margin-left: auto;
}
